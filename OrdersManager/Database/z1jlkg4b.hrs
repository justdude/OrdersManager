using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using OrdersManager.Model;
using System.Data.SQLite;
using System.Data.SQLite.Linq;
using System.Data;


namespace OrdersManager.Database
{

    public class DatabaseConverter<T>
    {

        public delegate T Convert(DataRow row);

        public static List<T> ConvertRowsToList<T>(DataTable input, Convert conversion)
        {
            List<T> retval = new List<T>();
            foreach(DataRow dr in input.Rows)
                retval.Add(conversion(dr));

            return retval;
        }

        public OrdersManager.Model.Costumer ToCostumer(DataRow row)
        {

            return null;
        }

    }
    public class Command
    {

        private SQLiteConnection Connection
        { get; set; }

        public Command(SQLiteConnection connection)
        {
            this.Connection = connection;
        }

        #region Create
        public void CreateTableCostumer()
        {
            SQLiteCommand command = new SQLiteCommand(Connection);
            command.CommandText = "Create Table If Not Exists Costumers(Id int AUTO_INCREMENT, CareerName varchar(255), FIO varchar(255), PhotoPath varchar(255), Adress varchar(255), PhotoName varchar(255))";
            command.ExecuteNonQuery();
        }

        public void CreateTableFreelancer()
        {
            SQLiteCommand command = new SQLiteCommand(Connection);
            command.CommandText = "Create Table If Not Exists Freelancers(Id int AUTO_INCREMENT, CareerName varchar(255), FIO varchar(255), PhotoPath varchar(255), Adress varchar(255), PhotoName varchar(255))";
            command.ExecuteNonQuery();
        }

        public void CreateTableTask()
        {
            SQLiteCommand command = new SQLiteCommand(Connection);
            command.CommandText = "Create Table If Not Exists Tasks(Id int AUTO_INCREMENT, ProjectId int, ExecutorId int, Name varchar(255),TaskStatus varchar(100), StartDate , EstimateDate)";
            command.ExecuteNonQuery();
        }

        public void CreateProjects()
        {
            SQLiteCommand command = new SQLiteCommand(Connection);
            command.CommandText = "Create Table If Not Exists Projects(Id int AUTO_INCREMENT, TeamLeadId int, CostumerId int, ProjectCost float,ProjectStatus varchar(100), StartDate datetime, FinalDate datetime)";
            command.ExecuteNonQuery();
        }
        #endregion

        #region Insert

        public void InsertCostumer(Costumer item)
        {
            SQLiteCommand command = new SQLiteCommand(Connection);
            string query = "Insert Into Costumers(CareerName, FIO, PhotoPath, Adress, PhotoName ) Values('{0}','{1}','{2}','{3}','{4}')";
            string commStr = string.Format(query, item.CareerName, item.FIO, item.PhotoPath, item.Adress, item.PhotoName);
            command.CommandText = commStr;
            command.ExecuteNonQuery();
        }

        public void InsertFreelancer(Freelancer item)
        {
            SQLiteCommand command = new SQLiteCommand(Connection);
            string query = "Insert Into Costumers(CareerName, FIO, PhotoPath, Adress, PhotoName ) Values('{0}','{1}','{2}','{3}','{4}')";
            string commStr = string.Format(query, item.CareerName, item.FIO, item.PhotoPath, item.Adress, item.PhotoName);
            command.CommandText = commStr;
            command.ExecuteNonQuery();
        }

        public void InsertTask(Task item)
        {
            string query = "Insert Into Task(ProjectId, ExecutorId, Name, TaskStatus, StartDate, EstimateDate ) Values(@ProjectId, @ExecutorId, @Name, @TaskStatus, @StartDate, @EstimateDate)";
            SQLiteCommand command = new SQLiteCommand(query, Connection);
            command.Parameters.AddWithValue("@ProjectId", item.ProjectId);
            command.Parameters.AddWithValue("@ExecutorId", item.ExecutorId);
            command.Parameters.AddWithValue("@Name", item.Name);
            command.Parameters.AddWithValue("@TaskStatus", item.TaskStatus);
            command.Parameters.AddWithValue("@StartDate", item.StartDate);
            command.Parameters.AddWithValue("@EstimateDate", item.EstimateDate);
            command.ExecuteNonQuery();
        }

        public void InsertProject(Project item)
        {
            string query = "Insert Into Project(TeamLeadId, CostumerId, ProjectCost, ProjectStatus, StartDate, FinalDate ) Values(@TeamLeadId, @CostumerId, @ProjectCost, @ProjectStatus, @StartDate, @FinalDate)";
            SQLiteCommand command = new SQLiteCommand(query, Connection);
            command.Parameters.AddWithValue("@TeamLeadId", item.TeamLeadId);
            command.Parameters.AddWithValue("@CostumerId", item.CostumerId);
            command.Parameters.AddWithValue("@ProjectCost", item.ProjectCost);
            command.Parameters.AddWithValue("@ProjectStatus", item.ProjectStatus);
            command.Parameters.AddWithValue("@StartDate", item.StartDate);
            command.Parameters.AddWithValue("@FinalDate", item.FinalDate);
            command.ExecuteNonQuery();
        }

        #endregion

        #region Select

        public DataTable SelectCostumers()
        {
            DataTable table = new DataTable();
            SQLiteCommand command = new SQLiteCommand(Connection);
            string query = "Select * From Costumers";
            SQLiteDataAdapter adapter = new SQLiteDataAdapter(query, Connection);
            adapter.Fill(table);
            return table;
        }

        public DataTable SelectFreelancers()
        {
            DataTable table = new DataTable();
            SQLiteCommand command = new SQLiteCommand(Connection);
            string query = "Select * From Freelancers";
            SQLiteDataAdapter adapter = new SQLiteDataAdapter(query, Connection);
            adapter.Fill(table);
            return table;
        }

        public DataTable SelectProjects()
        {
            DataTable table = new DataTable();
            SQLiteCommand command = new SQLiteCommand(Connection);
            string query = "Select * From Projects";
            SQLiteDataAdapter adapter = new SQLiteDataAdapter(query, Connection);
            adapter.Fill(table);
            return table;
        }

        public DataTable SelectTasks()
        {
            DataTable table = new DataTable();
            SQLiteCommand command = new SQLiteCommand(Connection);
            string query = "Select * From Tasks";
            SQLiteDataAdapter adapter = new SQLiteDataAdapter(query, Connection);
            adapter.Fill(table);
            return table;
        }

        #endregion

        #region Clear
        
        public void TotalyClear(string tableName)
        {
            string query = "Delete * From " + tableName;
            SQLiteCommand command = new SQLiteCommand(Connection);
            command.ExecuteNonQuery();
        }

        #endregion
    }
}
