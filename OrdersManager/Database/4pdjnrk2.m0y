using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using OrdersManager.Model;
using System.Data.SQLite;
using System.Data.SQLite.Linq;
using System.Data;
using System.Collections.ObjectModel;
using OrdersManager.ModelView;


namespace OrdersManager.Database
{

    public class DatabaseConverter
    {
        public static List<T> ConvertRowsToList<T>(DataTable input, Func<DataRow,T> conversion)
        {
            List<T> retval = new List<T>();
            foreach (DataRow dr in input.Rows)
                retval.Add(conversion(dr));

            return retval;
        }


        public static string NullToString(object obj)
        {
            if ((obj as string) == null)
            {
                return " ";
            }
            return (string)obj;
        }

        public static DateTime NullToDate(object obj)
        {
            if (obj == null)
            {
                return DateTime.Now;
            }
            DateTime data = DateTime.MinValue;
            if (DateTime.TryParse(obj.ToString(), out data))
                return data;
            return data; //SPIKE!!!!!!!!
        }

        public static OrdersManager.Model.Costumer ToCostumer(DataRow row)
        {
            Costumer costumer = new Costumer();
            costumer.Id = (long)row[0];
            //freelancer.CareerName = NullToString(row[1]);
            costumer.FIO = NullToString(row[2]);
            costumer.PhotoPath = NullToString(row[3]);
            costumer.Adress = NullToString(row[4]);
            costumer.PhotoName = NullToString(row[5]);
            return costumer;
        }

        public static OrdersManager.Model.Freelancer ToFreelancer(DataRow row)
        {
            Freelancer freelancer = new Freelancer();
            freelancer.Id = (long)row[0];
            //freelancer.CareerName = NullToString(row[1]);
            freelancer.FIO = NullToString(row[2]);
            freelancer.PhotoPath = NullToString(row[3]);
            freelancer.Adress = NullToString(row[4]);
            freelancer.PhotoName = NullToString(row[5]);
            return freelancer;
        }

        public static OrdersManager.Model.Task ToTask(DataRow row)
        {
            Task task = new Task();
            task.Id = (long)row[0];
            task.ProjectId = (long)row[1];
            task.ExecutorId = (long)row[2];
            task.Name = NullToString(row[3]);
            task.TaskStatus = NullToString(row[4]);
            task.StartDate = NullToDate(row[5]);
            task.EstimateDate = (NullToDate(row[6]));
            return task;
        }

        public static OrdersManager.Model.Project ToProject(DataRow row)
        {
            Project project = new Project();
            project.Id = (long)row[0];
            project.TeamLeadId = (long)row[1];
            project.CostumerId = (long)row[2];
            project.ProjectCost = (float)((double)row[3]);
            project.ProjectStatus = NullToString(row[4]);
            project.StartDate = NullToDate(row[5]);
            project.FinalDate = NullToDate(row[6]);
            project.ProjectName = NullToString(row[7]);
            return project;
        }

    }

    public class DatabaseLoader
    {
        public static ObservableCollection<ProjectViewModel> ComputeProjects(Command comm)
        {
            var table = comm.SelectProjects();
            var data = DatabaseConverter.ConvertRowsToList<Model.Project>(table, DatabaseConverter.ToProject);

            var list = new ObservableCollection<ProjectViewModel>(data.ConvertAll<ProjectViewModel>(
                x =>
                {

                    return new ProjectViewModel(x);
                })
                );
            return list;
        }

        public static ObservableCollection<TaskViewModel> ComputeTasks(Command comm)
        {
            var table = comm.SelectTasks();
            var data = DatabaseConverter.ConvertRowsToList<Task>(table, DatabaseConverter.ToTask);

            var list = new ObservableCollection<TaskViewModel>(data.ConvertAll<TaskViewModel>(
                x =>
                {

                    return new TaskViewModel(x);
                })
                );
            return list;
        }

        public static ObservableCollection<FreelancerViewModel> ComputeFreelansers(Command comm)
        {
            var table = comm.SelectFreelancers();
            var data = DatabaseConverter.ConvertRowsToList<Freelancer>(table, DatabaseConverter.ToFreelancer);

            var list = new ObservableCollection<FreelancerViewModel>(data.ConvertAll<FreelancerViewModel>(
                x =>
                {

                    return new FreelancerViewModel(x);
                })
                );
            return list;
        }

        public static ObservableCollection<CostumerViewModel> ComputeCostumers(Command comm)
        {
            var table = comm.SelectCostumers();
            var data = DatabaseConverter.ConvertRowsToList<Costumer>(table, DatabaseConverter.ToCostumer);

            var list = new ObservableCollection<CostumerViewModel>(data.ConvertAll<CostumerViewModel>(
                x =>
                {

                    return new CostumerViewModel(x);
                })
                );
            return list;
        }

    }

    public class Command
    {

        private SQLiteConnection Connection
        { get; set; }

        public Command(SQLiteConnection connection)
        {
            this.Connection = connection;
        }

        #region Create
        public void CreateTableCostumer()
        {
            SQLiteCommand command = new SQLiteCommand(Connection);
            command.CommandText = "Create Table If Not Exists Costumers(Id int AUTO_INCREMENT, CareerName varchar(255), FIO varchar(255), PhotoPath varchar(255), Adress varchar(255), PhotoName varchar(255))";
            command.ExecuteNonQuery();
        }

        public void CreateTableFreelancer()
        {
            SQLiteCommand command = new SQLiteCommand(Connection);
            command.CommandText = "Create Table If Not Exists Freelancers(Id int AUTO_INCREMENT, CareerName varchar(255), FIO varchar(255), PhotoPath varchar(255), Adress varchar(255), PhotoName varchar(255))";
            command.ExecuteNonQuery();
        }

        public void CreateTableTask()
        {
            SQLiteCommand command = new SQLiteCommand(Connection);
            command.CommandText = "Create Table If Not Exists Tasks(Id int AUTO_INCREMENT, Idproject int, ExecutorId int, Name varchar(255),TaskStatus varchar(100), StartDate , EstimateDate)";
            command.ExecuteNonQuery();
        }

        public void CreateProjects()
        {
            SQLiteCommand command = new SQLiteCommand(Connection);
            command.CommandText = "Create Table If Not Exists Projects(Id int AUTO_INCREMENT, TeamLeadId int, CostumerId int, ProjectCost float,ProjectStatus varchar(100), StartDate datetime, FinalDate datetime)";
            command.ExecuteNonQuery();
        }
        #endregion

        #region Insert

        public void InsertCostumer(Costumer item)
        {
            SQLiteCommand command = new SQLiteCommand(Connection);
            string query = "Insert Into Costumers(CareerName, FIO, PhotoPath, Adress, PhotoName ) Values('{0}','{1}','{2}','{3}','{4}')";
            string commStr = string.Format(query, item.CareerName, item.FIO, item.PhotoPath, item.Adress, item.PhotoName);
            command.CommandText = commStr;
            command.ExecuteNonQuery();
        }

        public void InsertFreelancer(Freelancer item)
        {
            SQLiteCommand command = new SQLiteCommand(Connection);
            string query = "Insert Into Costumers(CareerName, FIO, PhotoPath, Adress, PhotoName ) Values('{0}','{1}','{2}','{3}','{4}')";
            string commStr = string.Format(query, item.CareerName, item.FIO, item.PhotoPath, item.Adress, item.PhotoName);
            command.CommandText = commStr;
            command.ExecuteNonQuery();
        }

        public void InsertTask(Task item)
        {
            string query = "Insert Into Task(Idproject, ExecutorId, Name, TaskStatus, StartDate, EstimateDate ) Values(@Idproject, @ExecutorId, @Name, @TaskStatus, @StartDate, @EstimateDate)";
            SQLiteCommand command = new SQLiteCommand(query, Connection);
            command.Parameters.AddWithValue("@Idproject", item.ProjectId);
            command.Parameters.AddWithValue("@ExecutorId", item.ExecutorId);
            command.Parameters.AddWithValue("@Name", item.Name);
            command.Parameters.AddWithValue("@TaskStatus", item.TaskStatus);
            command.Parameters.AddWithValue("@StartDate", item.StartDate);
            command.Parameters.AddWithValue("@EstimateDate", item.EstimateDate);
            command.ExecuteNonQuery();
        }

        public void InsertProject(Project item)
        {
            string query = "Insert Into Project(TeamLeadId, CostumerId, ProjectCost, ProjectStatus, StartDate, FinalDate ) Values(@TeamLeadId, @CostumerId, @ProjectCost, @ProjectStatus, @StartDate, @FinalDate)";
            SQLiteCommand command = new SQLiteCommand(query, Connection);
            command.Parameters.AddWithValue("@TeamLeadId", item.TeamLeadId);
            command.Parameters.AddWithValue("@CostumerId", item.CostumerId);
            command.Parameters.AddWithValue("@ProjectCost", item.ProjectCost);
            command.Parameters.AddWithValue("@ProjectStatus", item.ProjectStatus);
            command.Parameters.AddWithValue("@StartDate", item.StartDate);
            command.Parameters.AddWithValue("@FinalDate", item.FinalDate);
            command.Parameters.AddWithValue("@FinalDate", item.ProjectName);
            command.ExecuteNonQuery();
        }

        #endregion

        #region Update

        public void UpdateCostumer(Costumer item)
        {
            SQLiteCommand command = new SQLiteCommand(Connection);
            string query = "Update Costumers Set CareerName='{0}', FIO='{1}', PhotoPath='{2}', Adress, PhotoName ) Values(,,,'{3}','{4}')";
            string commStr = string.Format(query, item.CareerName, item.FIO, item.PhotoPath, item.Adress, item.PhotoName);
            command.CommandText = commStr;
            command.ExecuteNonQuery();
        }

        #endregion

        #region Select

        public DataTable SelectCostumers()
        {
            DataTable table = new DataTable();
            SQLiteCommand command = new SQLiteCommand(Connection);
            string query = "Select * From Costumers";
            SQLiteDataAdapter adapter = new SQLiteDataAdapter(query, Connection);
            try 
            { 
                adapter.Fill(table);
            }
            catch(Exception ex)
            {
                System.Windows.MessageBox.Show(ex.Message.ToString());
            }
            return table;
        }

        public DataTable SelectFreelancers()
        {
            DataTable table = new DataTable();
            SQLiteCommand command = new SQLiteCommand(Connection);
            string query = "Select * From Freelancers";
            SQLiteDataAdapter adapter = new SQLiteDataAdapter(query, Connection);
            adapter.Fill(table);
            return table;
        }

        public DataTable SelectProjects()
        {
            DataTable table = new DataTable();
            SQLiteCommand command = new SQLiteCommand(Connection);
            string query = "Select * From Projects";
            SQLiteDataAdapter adapter = new SQLiteDataAdapter(query, Connection);
            adapter.Fill(table);
            return table;
        }

        public DataTable SelectTasks()
        {
            DataTable table = new DataTable();
            SQLiteCommand command = new SQLiteCommand(Connection);
            string query = "Select * From Tasks";
            SQLiteDataAdapter adapter = new SQLiteDataAdapter(query, Connection);
            adapter.Fill(table);
            return table;
        }

        #endregion

        #region Clear
        
        public void TotalyClear(string tableName)
        {
            string query = "Delete * From " + tableName;
            SQLiteCommand command = new SQLiteCommand(Connection);
            command.ExecuteNonQuery();
        }

        #endregion

        public static void Compute(Project project, List<Task> tasks)
        {
            tasks.Where(p => p.ProjectId == project.Id).ToList();
        }
    }
}
