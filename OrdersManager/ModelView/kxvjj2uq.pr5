using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Collections.ObjectModel;
using System.Data;
using MVVM;
using System.Windows.Input;
using System.Windows.Controls;
using MVVM;
using System.ComponentModel;
using System.Windows.Data;

namespace OrdersManager.ModelView
{
    public class OrdersRootViewModel : ViewModelBase
    {


        public ItemCollection Tabs
        {
            get;
            private set;
        }

        private DelegateCommand onAddTabItemClick;

        public ICommand LoadContent { get; set; }

        public ICommand AddTabItemClick 
        { 
            get
            {
                if (onAddTabItemClick==null)
                {
                    onAddTabItemClick = new DelegateCommand(OnAddTabItemClick);
                }


                return onAddTabItemClick;
            }
            set
            {
                OnPropertyChanged("AddTabItemClick");
            }
        }

        public static OrdersRootViewModel Instance
        {
            get;
            private set;
        }


        public void OnAddTabItemClick()
        {
            List<string> tabHeaders = new List<string>();
            foreach(var tab in Tabs)
                tabHeaders.Add( (string)((TabItem)tab).Header);
            Views.TabTypeSelect window = new Views.TabTypeSelect(tabHeaders);
            window.ShowDialog();
        }

        /// <summary>
        /// AddTab
        /// </summary>
        /// <param name="Index"> индекс вкладки</param>
        public void AddTab(int Index)
        {
            TabItem cachedTab = new TabItem();
            cachedTab.Content = ((TabItem)Tabs[Index]).Content;
            cachedTab.Header = ((TabItem)Tabs[Index]).Header;
            Tabs.Add(cachedTab);
        }

        public List<MVVM.MenuItem> MenuOptions
        {
            get  {
                var menu = new List<MVVM.MenuItem>();
                var mi = new MVVM.MenuItem("Add");
                for (int i = 0; i < 4; i++ )
                {
                    /*var sff = fl;
                    mi.Children.Add(new MenuItem(fl.Attributes.Description) 
                    { 
                        Command = new DelegateCommand(() =>
                        { 
                            LoadFromFormat(sff); 
                        }) */
                }
                menu.Add(mi);

                menu.Add(new MVVM.MenuItem("Close _All") 
                                    { 
                                        /*Command = new DelegatingCommand(OnCloseAll, 
                                                        () => FileList.Count > 0)*/
                                    });
               return menu;
            }


        }

        public DataView Project
        {
            get
            {
                DataTable table = new DataTable("Project");
                table.Columns.Add("Column1");
                table.Columns.Add("Column2");
                table.Rows.Add("text1","text2");
                table.Rows.Add("text1", "text2");
                return table.DefaultView;
            }
        }

        private object selectedNode;
        public object SelectedItem
        {
            get
            {
                
                //System.Windows.MessageBox.Show("sad");
                OnPropertyChanged("SelectedItem");
                return selectedNode;
            }
            set
            {
                selectedNode = value;
                OnPropertyChanged("SelectedItem");
            }
            /*set
            {
                if (value == null) return;
                selectedNode = value;
                selectedNode.IsSelected = value.IsSelected;
                OnPropertyChanged("IsSelected");
            }*/
        }


        //public ObservableCollection<PersonViewModel> Persons { get; set; }
        public ObservableCollection<ProjectViewModel> Projects 
        {
            get
            {
                var data = OrdersManager.CacheManager.CacheManager.Instance.Projects;
                var list = new ObservableCollection<ProjectViewModel>(data);
                return list;
            }
        }

        public ObservableCollection<CostumerViewModel> Costumers
        {
            get
            {
                var data = OrdersManager.CacheManager.CacheManager.Instance.Costumers;
                var list = new ObservableCollection<CostumerViewModel>(data);
                return list;
            }
        }

        public ObservableCollection<FreelancerViewModel> Freelancers
        {
            get
            {
                var data = OrdersManager.CacheManager.CacheManager.Instance.Freelancers;
                var list = new ObservableCollection<FreelancerViewModel>(data);
                return list;
            }
        }

        public ObservableCollection<Node> Nodes { get; private set; }

        public OrdersRootViewModel(ItemCollection tabs)
        {
            this.Tabs = tabs;
           // tabs.Add(tabs[0]);

            LoadContent = new DelegateCommand(
                () => 
                {
                    this.SelectedItem = Node.FindSelectedNode(this.Nodes);
                },
                () => { return true; }
                );
            var Projects = OrdersManager.CacheManager.CacheManager.Instance.Projects;
            for (int i = 0; i < Freelancers.Count; i++)
            {
                Freelancers[i].Children.Add(Costumers[0]);
                foreach (var pr in Projects)
                {
                    pr.Children.Add(Freelancers[i]);
                }
               
            }
            Nodes = new ObservableCollection<Node>(Projects);


        }

    }
}
